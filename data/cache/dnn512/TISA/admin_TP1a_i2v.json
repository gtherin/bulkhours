{
    "alexandra.larsonneur@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape=image.reshape((image.shape[0] * image.shape[1] * image.shape[2],1))\n    #image_reshape = np.array([])\n\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "alexandra.larsonneur@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape=image.reshape((image.shape[0] * image.shape[1] * image.shape[2],1))\n    #image_reshape = np.array([])\n\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:03:10",
        "atype": "bkcode"
    },
    "alexis.akujuobi-asoluka@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "alexis.akujuobi-asoluka@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 20:20:20",
        "atype": "bkcode"
    },
    "ali.m-sahi@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x*y*z, 1) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "ali.m-sahi@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x*y*z, 1) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:52:31",
        "atype": "bkcode"
    },
    "angel.jouen@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x,y,z = image.shape\n    image_reshape = image.reshape(x*y*z,1) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "angel.jouen@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x,y,z = image.shape\n    image_reshape = image.reshape(x*y*z,1) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:03:25",
        "atype": "bkcode"
    },
    "antoine.rochette@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    sh = np.shape(image)\n    image_reshape = np.reshape(image, (sh[0]*sh[1]*sh[2], 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "antoine.rochette@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    sh = np.shape(image)\n    image_reshape = np.reshape(image, (sh[0]*sh[1]*sh[2], 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:00:25",
        "atype": "bkcode"
    },
    "arij.salablab@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l, h, d = image.shape\n    image_reshape_size = np.array([l*h*d, 1])   # dimension du vecteur créé\n    image_reshape = image.reshape(image_reshape_size) # redimensionnement \n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "arij.salablab@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l, h, d = image.shape\n    image_reshape_size = np.array([l*h*d, 1])   # dimension du vecteur créé\n    image_reshape = image.reshape(image_reshape_size) # redimensionnement \n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:12:27"
    },
    "armand.loisil@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    \n    l,c,w = np.shape(image)\n    image_reshape = image.reshape(l*c*w,1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\n\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "armand.loisil@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    \n    l,c,w = np.shape(image)\n    image_reshape = image.reshape(l*c*w,1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\n\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:03:14",
        "atype": "bkcode"
    },
    "axel.autexier@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "axel.streiff@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    l,h,d = np.shape(image)\n    ### START CODE HERE ###\n    image_reshape = np.reshape(image,(l*h*d,1)) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "axel.streiff@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    l,h,d = np.shape(image)\n    ### START CODE HERE ###\n    image_reshape = np.reshape(image,(l*h*d,1)) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:57:09",
        "atype": "bkcode"
    },
    "badis.perdrix@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.array([image.reshape(18,1)]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "badis.perdrix@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.array([image.reshape(18,1)]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:06:49",
        "atype": "bkcode"
    },
    "baptiste.rousselet@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    m,n,o=np.shape(image)\n      \n\n    image_reshape = np.array([m*o*3,1]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "baptiste.rousselet@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    m,n,o=np.shape(image)\n      \n\n    image_reshape = np.array([m*o*3,1]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:35:29",
        "atype": "bkcode"
    },
    "colin.duchanoy@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape =  image.reshape(-1) \n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "colin.duchanoy@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape =  image.reshape(-1) \n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:01:24"
    },
    "corentin.dumont@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "dorian.rondeau@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    [lenght,height,depth] = image.shape\n    Reshape_size = np.array([lenght*height*depth,1])\n    image_reshape = image.reshape(Reshape_size)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "dorian.rondeau@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    [lenght,height,depth] = image.shape\n    Reshape_size = np.array([lenght*height*depth,1])\n    image_reshape = image.reshape(Reshape_size)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:51:26",
        "atype": "bkcode"
    },
    "evan.garcia@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape((image.shape[0] * image.shape[1] * image.shape[2], 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "evan.garcia@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape((image.shape[0] * image.shape[1] * image.shape[2], 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 20:12:46",
        "atype": "bkcode"
    },
    "gaetan.chiesura@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l,h,d= np.shape(image)\n    image_reshape = np.reshape(image,((l*h*d,1)))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "gaetan.chiesura@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l,h,d= np.shape(image)\n    image_reshape = np.reshape(image,((l*h*d,1)))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:01:54",
        "atype": "bkcode"
    },
    "geoffrey.vaillant@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "guillaume.therin@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "john.doe@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "julian.lavarelo@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    m,n,p = np.shape(image)\n  \n    image_vectorized = image.reshape(m*n*p,1) # ...\n    ### END CODE HERE ###\n\n    return image_vectorized\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "julian.lavarelo@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    m,n,p = np.shape(image)\n  \n    image_vectorized = image.reshape(m*n*p,1) # ...\n    ### END CODE HERE ###\n\n    return image_vectorized\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:58:34",
        "atype": "bkcode"
    },
    "lea.dupin@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    length, height, depth = image.shape\n    image_reshape = np.reshape(image, (length * height * depth, 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "lea.dupin@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    length, height, depth = image.shape\n    image_reshape = np.reshape(image, (length * height * depth, 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:15:20",
        "atype": "bkcode"
    },
    "luc.fourty@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    \n    ### START CODE HERE ###\n    image_reshape = np.array(image.shape) \n    taille = image.shape[0] * image.shape[1] * image.shape[2]\n    image_reshape = np.reshape(image, (taille,1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "luc.fourty@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    \n    ### START CODE HERE ###\n    image_reshape = np.array(image.shape) \n    taille = image.shape[0] * image.shape[1] * image.shape[2]\n    image_reshape = np.reshape(image, (taille,1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:15:21"
    },
    "luc.sauleau@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = np.reshape(image, (x*y*z, 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "luc.sauleau@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = np.reshape(image, (x*y*z, 1))\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:04:31",
        "atype": "bkcode"
    },
    "ludovic.said@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "mathieu.klingler@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(-1) #np.array([]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "mathieu.klingler@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(-1) #np.array([]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:58:25",
        "atype": "bkcode"
    },
    "matteo.crosnier-de-bellaistre@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    v = np.shape(image)\n    v = np.reshape(image,(v[0]*v[1]*v[2],1))\n    image_reshape = np.array([v]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "matteo.crosnier-de-bellaistre@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    v = np.shape(image)\n    v = np.reshape(image,(v[0]*v[1]*v[2],1))\n    image_reshape = np.array([v]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:58:21",
        "atype": "bkcode"
    },
    "mikael.kealbert@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    shape = image.shape\n    image_reshape = image.reshape((shape[0]*shape[1]*shape[2]), 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "mikael.kealbert@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    shape = image.shape\n    image_reshape = image.reshape((shape[0]*shape[1]*shape[2]), 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 23:56:58",
        "atype": "bkcode"
    },
    "nathan.heckmann@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x,y,z = image.shape\n    image_reshape = image.reshape(x*y*z,1)\n    #image_reshape = image.reshape()\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "nathan.heckmann@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x,y,z = image.shape\n    image_reshape = image.reshape(x*y*z,1)\n    #image_reshape = image.reshape()\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:04:18",
        "atype": "bkcode"
    },
    "nils.joanne@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    n, m, d = np.shape(image)\n    image_reshape = image.reshape([n*m*d,1])\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "nils.joanne@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    n, m, d = np.shape(image)\n    image_reshape = image.reshape([n*m*d,1])\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:00:38"
    },
    "omar.al-hammal@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "pedro-henrique.valvezon-maldonado@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "riccardo.cecchetto@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l,L,h = np.shape(image)\n    image_reshape = image.reshape([l*L*h,1])\n      #image_reshape = np.array() # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "riccardo.cecchetto@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l,L,h = np.shape(image)\n    image_reshape = image.reshape([l*L*h,1])\n      #image_reshape = np.array() # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:01:19",
        "atype": "bkcode"
    },
    "romain.miaux@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x*y*z, 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "romain.miaux@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x*y*z, 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:10:21"
    },
    "solution": {
        "update_time": "2023-10-10 22:18:54",
        "visible": true,
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1).T\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y, 3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n\n",
        "note_upd": "2023-10-10 20:19:02",
        "explanation": "",
        "evaluation": "def student_evaluation_function(max_score=10):\n    eimage = np.array([[0.67826139, 0.29380381, 0.90714982, 0.52835647, 0.4215251,  0.45017551,\n                       0.92814219, 0.96677647, 0.85304703, 0.52351845, 0.19981397, 0.27417313,\n                       0.60659855, 0.00533165, 0.10820313, 0.49978937, 0.34144279, 0.94630077]])\n    if np.max(np.abs(image2vector(image)-eimage)) < 0.001:\n        return max_score\n    return 0\n",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1).T\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y, 3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n\n",
        "user": "solution",
        "note": 10.0,
        "atype": "bkcode",
        "hint": ""
    },
    "sualp.komurcuoglu@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.reshape(image, (9, 2)) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "sualp.komurcuoglu@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.reshape(image, (9, 2)) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 17:58:43"
    },
    "thibaud.bonnet@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l, h, d = image.shape\n    n = np.array([l * h * d, 1])\n    image_reshape = image.reshape(n)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "thibaud.bonnet@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    l, h, d = image.shape\n    n = np.array([l * h * d, 1])\n    image_reshape = image.reshape(n)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:56:44",
        "atype": "bkcode"
    },
    "wassil.amghar@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.array([image.reshape(18,1)]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "wassil.amghar@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    image_reshape = np.array([image.reshape(18,1)]) # ...\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:05:46",
        "atype": "bkcode"
    },
    "wenceslas.lombard@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:02",
        "note": NaN
    },
    "yann-loic-atasse.atakoui@ipsa.fr": {
        "answer": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x * y * z, 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note_upd": "2023-10-10 20:19:02",
        "user": "yann-loic-atasse.atakoui@ipsa.fr",
        "main_execution": "def image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n\n    ### START CODE HERE ###\n    x, y, z = image.shape\n    image_reshape = image.reshape(x * y * z, 1)\n    ### END CODE HERE ###\n\n    return image_reshape\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint(f\"image.shape = {image.shape}, image2vector(image).shape = {image2vector(image).shape}\")\nprint(f\"image2vector(image) = {image2vector(image)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:02:11",
        "atype": "bkcode"
    }
}