{
    "alexandra.larsonneur@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,ord = 2,axis = 1,keepdims = True)\n\n    # Divide x by its norm.\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "alexandra.larsonneur@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,ord = 2,axis = 1,keepdims = True)\n\n    # Divide x by its norm.\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:05:39",
        "atype": "bkcode"
    },
    "alexis.akujuobi-asoluka@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x=x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "alexis.akujuobi-asoluka@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x=x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 20:25:49",
        "atype": "bkcode"
    },
    "ali.m-sahi@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    n, m = x.shape\n    nx = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n\n    # Divide x by its norm.\n    xnorm = x/nx\n\n    x = xnorm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "ali.m-sahi@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    n, m = x.shape\n    nx = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n\n    # Divide x by its norm.\n    xnorm = x/nx\n\n    x = xnorm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:56:50",
        "atype": "bkcode"
    },
    "angel.jouen@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "angel.jouen@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:07:53",
        "atype": "bkcode"
    },
    "antoine.rochette@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "antoine.rochette@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:05:25",
        "atype": "bkcode"
    },
    "arij.salablab@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "arij.salablab@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:56:25"
    },
    "armand.loisil@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "armand.loisil@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:08:20",
        "atype": "bkcode"
    },
    "axel.autexier@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "axel.streiff@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,axis=1,keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "axel.streiff@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,axis=1,keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:03:08",
        "atype": "bkcode"
    },
    "badis.perdrix@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,axis=1,keepdims=True)# ...\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm# ...\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "badis.perdrix@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,axis=1,keepdims=True)# ...\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm# ...\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:11:59",
        "atype": "bkcode"
    },
    "baptiste.rousselet@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm=np.linalg.norm(x,axis=1,ord=2,keepdims=True)\n\n\n    # Divide x by its norm.\n    # ...\n    x_normalized=x/x_norm\n    ### END CODE HERE ###\n    x=x_normalized\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "baptiste.rousselet@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm=np.linalg.norm(x,axis=1,ord=2,keepdims=True)\n\n\n    # Divide x by its norm.\n    # ...\n    x_normalized=x/x_norm\n    ### END CODE HERE ###\n    x=x_normalized\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:15:40",
        "atype": "bkcode"
    },
    "colin.duchanoy@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n\n\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x=x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "colin.duchanoy@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n\n\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x=x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:01:16",
        "atype": "bkcode"
    },
    "corentin.dumont@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "dorian.rondeau@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "dorian.rondeau@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:56:48",
        "atype": "bkcode"
    },
    "evan.garcia@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x , ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "evan.garcia@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x , ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 20:00:45"
    },
    "gaetan.chiesura@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm= np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n    # Divide x by its norm.\n    # ...\n    x_normalized= x/x_norm\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "gaetan.chiesura@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm= np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n    # Divide x by its norm.\n    # ...\n    x_normalized= x/x_norm\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:07:47"
    },
    "geoffrey.vaillant@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "guillaume.therin@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "john.doe@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n\n    # Divide x by its norm.\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0, 3, 4],\n    [1, 6, 4]])\nprint(\"normalizeRows(x) = \" + str(normalizeRows(x)))\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "john.doe@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n\n    # Divide x by its norm.\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0, 3, 4],\n    [1, 6, 4]])\nprint(\"normalizeRows(x) = \" + str(normalizeRows(x)))\n",
        "note": 0.0,
        "update_time": "2023-09-28 11:06:22",
        "atype": "bkcode"
    },
    "julian.lavarelo@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = 1)\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows\\n({x})\\n = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "julian.lavarelo@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = 1)\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows\\n({x})\\n = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:02:49",
        "atype": "bkcode"
    },
    "lea.dupin@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "lea.dupin@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:15:33",
        "atype": "bkcode"
    },
    "luc.fourty@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "luc.fourty@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:15:15",
        "atype": "bkcode"
    },
    "luc.sauleau@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm_x = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/norm_x\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "luc.sauleau@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm_x = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x/norm_x\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:07:56",
        "atype": "bkcode"
    },
    "ludovic.said@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "mathieu.klingler@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x,ord = 2,axis = 1,keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "mathieu.klingler@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x,ord = 2,axis = 1,keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:01:24",
        "atype": "bkcode"
    },
    "matteo.crosnier-de-bellaistre@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x,ord = 2,axis=1,keepdims=True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "matteo.crosnier-de-bellaistre@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x,ord = 2,axis=1,keepdims=True)\n\n    # Divide x by its norm.\n    x = x/x_norm\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:02:32",
        "atype": "bkcode"
    },
    "mikael.kealbert@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,ord = 2, axis=1, keepdims=True)\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "mikael.kealbert@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x,ord = 2, axis=1, keepdims=True)\n    # Divide x by its norm.\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 23:57:07",
        "atype": "bkcode"
    },
    "nathan.heckmann@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "nathan.heckmann@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:09:57",
        "atype": "bkcode"
    },
    "nils.joanne@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    norm_x = np.linalg.norm(x, ord=2,axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/norm_x\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "nils.joanne@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    norm_x = np.linalg.norm(x, ord=2,axis = 1, keepdims = True)\n    # Divide x by its norm.\n    # ...\n    x = x/norm_x\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:03:33"
    },
    "omar.al-hammal@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "pedro-henrique.valvezon-maldonado@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "riccardo.cecchetto@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm = np.linalg.norm(x,axis =1, keepdims = True)\n    x= x/norm\n\n    # Divide x by its norm.\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "riccardo.cecchetto@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm = np.linalg.norm(x,axis =1, keepdims = True)\n    x= x/norm\n\n    # Divide x by its norm.\n    # ...\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:03:26",
        "atype": "bkcode"
    },
    "romain.miaux@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([[0., 3, 4],\n              [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "romain.miaux@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    # ...\n    x = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([[0., 3, 4],\n              [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:10:31"
    },
    "solution": {
        "update_time": "2023-10-10 22:19:44",
        "visible": true,
        "answer": "def normalizeRows(x):\n    \"\"\"Implement a function that normalizes each row of the matrix x (to have unit length).\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x /= norm\n\n    return x\n\nx = np.array([[0., 3, 4], [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n\n",
        "note_upd": "2023-10-10 20:19:52",
        "explanation": "",
        "evaluation": "def student_evaluation_function(max_score=10):\n    x = np.array([[0., 3, 4], [1, 6, 4]])\n\n    ref_data = np.array([[ 0., 0.6, 0.8 ], [ 0.13736056, 0.82416338, 0.54944226]])\n    if np.max(np.abs(student.normalizeRows(x)-ref_data)) < 0.001:\n        return max_score\n    return 0\n",
        "main_execution": "def normalizeRows(x):\n    \"\"\"Implement a function that normalizes each row of the matrix x (to have unit length).\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm = np.linalg.norm(x, ord=2, axis=1, keepdims=True)\n\n    # Divide x by its norm.\n    x /= norm\n\n    return x\n\nx = np.array([[0., 3, 4], [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n\n",
        "user": "solution",
        "note": 10.0,
        "atype": "bkcode",
        "hint": ""
    },
    "sualp.komurcuoglu@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    # ...\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "sualp.komurcuoglu@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    # ...\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    # ...\n    x = x / x_norm\n\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 17:58:56"
    },
    "thibaud.bonnet@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm_x = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    ### END CODE HERE ###\n\n    return x / norm_x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "thibaud.bonnet@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    norm_x = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    ### END CODE HERE ###\n\n    return x / norm_x\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 13:58:47",
        "atype": "bkcode"
    },
    "wassil.amghar@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "wassil.amghar@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n\n\n    # Divide x by its norm.\n    x_normalized = x/x_norm\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:11:47",
        "atype": "bkcode"
    },
    "wenceslas.lombard@ipsa.fr": {
        "note_upd": "2023-10-10 20:19:52",
        "note": NaN
    },
    "yann-loic-atasse.atakoui@ipsa.fr": {
        "answer": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    n, m = x.shape \n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n    # ...\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note_upd": "2023-10-10 20:19:52",
        "user": "yann-loic-atasse.atakoui@ipsa.fr",
        "main_execution": "def normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    µ\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    n, m = x.shape \n    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)\n    # Divide x by its norm.\n    x_normalized = x / x_norm\n    # ...\n\n    ### END CODE HERE ###\n\n    return x_normalized\n\nx = np.array([\n    [0., 3, 4],\n    [1, 6, 4]])\nprint(f\"normalizeRows({x}) = {normalizeRows(x)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:12:02",
        "atype": "bkcode"
    }
}