{
    "alexandra.larsonneur@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y),axis = 0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "alexandra.larsonneur@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y),axis = 0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:19:03",
        "atype": "bkcode"
    },
    "alexis.akujuobi-asoluka@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y),axis=0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "alexis.akujuobi-asoluka@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y),axis=0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 20:29:55",
        "atype": "bkcode"
    },
    "ali.m-sahi@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    abs_diff = np.abs(y - yhat)\n    sum = np.sum(abs_diff, keepdims = True)\n    loss = sum # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "ali.m-sahi@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    abs_diff = np.abs(y - yhat)\n    sum = np.sum(abs_diff, keepdims = True)\n    loss = sum # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:06:31",
        "atype": "bkcode"
    },
    "angel.jouen@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "angel.jouen@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:20:28",
        "atype": "bkcode"
    },
    "antoine.rochette@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat), axis=0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "antoine.rochette@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat), axis=0)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:20:09",
        "atype": "bkcode"
    },
    "arij.salablab@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "arij.salablab@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-04 16:56:39",
        "atype": "bkcode"
    },
    "armand.loisil@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "armand.loisil@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:15:51",
        "atype": "bkcode"
    },
    "axel.autexier@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "axel.streiff@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "axel.streiff@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:18:38",
        "atype": "bkcode"
    },
    "badis.perdrix@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "badis.perdrix@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:20:24",
        "atype": "bkcode"
    },
    "baptiste.rousselet@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "colin.duchanoy@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum( np.abs(y-yhat) )\n    \n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "colin.duchanoy@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum( np.abs(y-yhat) )\n    \n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:09:24",
        "atype": "bkcode"
    },
    "corentin.dumont@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "dorian.rondeau@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "dorian.rondeau@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:05:33",
        "atype": "bkcode"
    },
    "evan.garcia@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "evan.garcia@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 20:06:38",
        "atype": "bkcode"
    },
    "gaetan.chiesura@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "gaetan.chiesura@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:18:17",
        "atype": "bkcode"
    },
    "geoffrey.vaillant@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "guillaume.therin@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "john.doe@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "julian.lavarelo@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "julian.lavarelo@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:19:04",
        "atype": "bkcode"
    },
    "lea.dupin@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "lea.dupin@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:28:36",
        "atype": "bkcode"
    },
    "luc.fourty@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = 0\n    for i in range(y.shape[0]):\n      loss += np.abs(y[i] - yhat[i])\n\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "luc.fourty@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = 0\n    for i in range(y.shape[0]):\n      loss += np.abs(y[i] - yhat[i])\n\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:26:32",
        "atype": "bkcode"
    },
    "luc.sauleau@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "luc.sauleau@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:13:23",
        "atype": "bkcode"
    },
    "ludovic.said@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "mathieu.klingler@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "mathieu.klingler@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:10:12",
        "atype": "bkcode"
    },
    "matteo.crosnier-de-bellaistre@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat),keepdims=True) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "matteo.crosnier-de-bellaistre@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat),keepdims=True) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:09:01",
        "atype": "bkcode"
    },
    "mikael.kealbert@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "mikael.kealbert@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat-y))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 23:57:24",
        "atype": "bkcode"
    },
    "nathan.heckmann@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Calculate the absolute difference between yhat and y\n    absolute_difference = np.abs(yhat - y)\n\n    # Sum up the absolute differences\n    loss = np.sum(absolute_difference)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "nathan.heckmann@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    # Calculate the absolute difference between yhat and y\n    absolute_difference = np.abs(yhat - y)\n\n    # Sum up the absolute differences\n    loss = np.sum(absolute_difference)\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-04 14:24:23",
        "atype": "bkcode"
    },
    "nils.joanne@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "nils.joanne@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y-yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:09:15",
        "atype": "bkcode"
    },
    "omar.al-hammal@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "pedro-henrique.valvezon-maldonado@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "riccardo.cecchetto@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat - y)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "riccardo.cecchetto@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat - y)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:14:26",
        "atype": "bkcode"
    },
    "romain.miaux@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    if y.shape != yhat.shape:\n      print(\"Not compatible size for the predicted values and the real values\")\n      exit()\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "romain.miaux@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    if y.shape != yhat.shape:\n      print(\"Not compatible size for the predicted values and the real values\")\n      exit()\n    loss = np.sum(np.abs(y-yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:10:46"
    },
    "solution": {
        "update_time": "2023-10-10 22:42:32",
        "visible": true,
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n\n",
        "note_upd": "2023-10-11 06:41:23",
        "explanation": "",
        "evaluation": "def student_evaluation_function(max_score=10):\n    yhat = np.array([.9, 0.2, 0.1, .4, .9])\n    y = np.array([1, 0, 0, 1, 1])\n    if np.abs(student.L1(yhat, y)-1.1) < 0.001:\n        return max_score\n    return 0\n",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n\n",
        "user": "solution",
        "note": 10.0,
        "atype": "bkcode",
        "hint": ""
    },
    "sualp.komurcuoglu@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    abs_diff = np.abs(y - yhat)\n    print(abs_diff)\n    loss = np.sum(abs_diff) ## fill in the blanks here\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([0.9, 0.2, 0.1, 0.4, 0.9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "sualp.komurcuoglu@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    abs_diff = np.abs(y - yhat)\n    print(abs_diff)\n    loss = np.sum(abs_diff) ## fill in the blanks here\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([0.9, 0.2, 0.1, 0.4, 0.9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 18:07:37"
    },
    "thibaud.bonnet@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ### \n    ### END CODE HERE ###\n\n    return np.sum(np.abs(y - yhat), axis = 0, keepdims = True)\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "thibaud.bonnet@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ### \n    ### END CODE HERE ###\n\n    return np.sum(np.abs(y - yhat), axis = 0, keepdims = True)\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:19:50",
        "atype": "bkcode"
    },
    "wassil.amghar@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "wassil.amghar@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(y - yhat)) # ...\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:16:28",
        "atype": "bkcode"
    },
    "wenceslas.lombard@ipsa.fr": {
        "note_upd": "2023-10-11 06:41:23",
        "note": NaN
    },
    "yann-loic-atasse.atakoui@ipsa.fr": {
        "answer": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat - y))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note_upd": "2023-10-11 06:41:23",
        "user": "yann-loic-atasse.atakoui@ipsa.fr",
        "main_execution": "def L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n\n    ### START CODE HERE ###\n    loss = np.sum(np.abs(yhat - y))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(f\"L1(yhat, y) = {L1(yhat, y)}\")\n",
        "note": 10.0,
        "update_time": "2023-10-03 14:24:37",
        "atype": "bkcode"
    }
}