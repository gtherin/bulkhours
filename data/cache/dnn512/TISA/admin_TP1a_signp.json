{
    "alexandra.larsonneur@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s =   1/(1+(np.exp(-x)))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "alexandra.larsonneur@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s =   1/(1+(np.exp(-x)))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:46:16",
        "atype": "bkcode"
    },
    "alexis.akujuobi-asoluka@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "ali.m-sahi@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "ali.m-sahi@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:42:44",
        "atype": "bkcode"
    },
    "angel.jouen@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "angel.jouen@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:51:58",
        "atype": "bkcode"
    },
    "antoine.rochette@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "antoine.rochette@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:49:46",
        "atype": "bkcode"
    },
    "arij.salablab@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "arij.salablab@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:49:56",
        "atype": "bkcode"
    },
    "armand.loisil@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/ (1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "armand.loisil@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/ (1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:44:14",
        "atype": "bkcode"
    },
    "axel.autexier@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "axel.streiff@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "axel.streiff@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:49:33",
        "atype": "bkcode"
    },
    "badis.perdrix@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x)) # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "badis.perdrix@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x)) # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:53:32",
        "atype": "bkcode"
    },
    "baptiste.rousselet@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "baptiste.rousselet@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:02:19"
    },
    "colin.duchanoy@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "colin.duchanoy@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:50:08"
    },
    "corentin.dumont@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "dorian.rondeau@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "dorian.rondeau@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:41:14",
        "atype": "bkcode"
    },
    "evan.garcia@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "evan.garcia@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:47:39"
    },
    "gaetan.chiesura@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp((-x)))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "gaetan.chiesura@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp((-x)))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:53:22"
    },
    "geoffrey.vaillant@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "guillaume.therin@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "john.doe@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "julian.lavarelo@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "julian.lavarelo@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:45:43",
        "atype": "bkcode"
    },
    "lea.dupin@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(- x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "lea.dupin@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(- x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:50:04",
        "atype": "bkcode"
    },
    "luc.fourty@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "luc.fourty@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:46:12"
    },
    "luc.sauleau@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "luc.sauleau@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:45:35",
        "atype": "bkcode"
    },
    "ludovic.said@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "mathieu.klingler@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "mathieu.klingler@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:48:26",
        "atype": "bkcode"
    },
    "matteo.crosnier-de-bellaistre@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "matteo.crosnier-de-bellaistre@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 0.0,
        "update_time": "2023-10-03 13:44:39",
        "atype": "bkcode"
    },
    "mikael.kealbert@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "nathan.heckmann@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "nathan.heckmann@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:57:57"
    },
    "nils.joanne@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "nils.joanne@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:48:46",
        "atype": "bkcode"
    },
    "omar.al-hammal@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "pedro-henrique.valvezon-maldonado@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "riccardo.cecchetto@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "riccardo.cecchetto@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:49:23",
        "atype": "bkcode"
    },
    "romain.miaux@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "romain.miaux@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:52:38"
    },
    "solution": {
        "update_time": "2023-10-10 22:16:18",
        "visible": true,
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x.\n\n    :param x: a scalar or numpy array of any size\n    :return: s  sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n\n",
        "note_upd": "2023-10-11 05:08:24",
        "explanation": "",
        "user": "solution",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x.\n\n    :param x: a scalar or numpy array of any size\n    :return: s  sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n\n",
        "evaluation": "def student_evaluation_function(show_note=True):\n    x = np.linspace(0, 10, 10)\n    return bulkhours.is_equal(data_test=student.sigmoid(x), max_score=3.0, policy=\"strict\", error=1e-8, data_ref=teacher.sigmoid(x), min_score=0)\n\n",
        "note": 3.0,
        "atype": "bkcode",
        "hint": ""
    },
    "sualp.komurcuoglu@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "sualp.komurcuoglu@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:01:36"
    },
    "thibaud.bonnet@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n\n    return 1 / (1 + np.exp(-x))\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "thibaud.bonnet@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n\n    return 1 / (1 + np.exp(-x))\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:45:08",
        "atype": "bkcode"
    },
    "wassil.amghar@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-1*x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "wassil.amghar@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1/(1+np.exp(-1*x))  # ...\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "update_time": "2023-10-03 13:53:19",
        "atype": "bkcode"
    },
    "wenceslas.lombard@ipsa.fr": {
        "note_upd": "2023-10-11 05:08:24",
        "note": NaN
    },
    "yann-loic-atasse.atakoui@ipsa.fr": {
        "answer": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-1*x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note_upd": "2023-10-11 05:08:24",
        "user": "yann-loic-atasse.atakoui@ipsa.fr",
        "main_execution": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n\n    # Implement the function using numpy.exp\n    s = 1 / (1 + np.exp(-1*x))\n\n    return s\n\n# Plot your version of your sigmoid function with matplotlib\nplt.plot(np.linspace(-10, 10), sigmoid(np.linspace(-10, 10)))\n\nx = np.array([1, 2, 3])\nprint(f\"sigmoid({x})={sigmoid(x)}\")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 13:53:42"
    }
}