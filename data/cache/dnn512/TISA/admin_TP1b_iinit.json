{
    "alexandra.larsonneur@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    #dim=num_px*num_px*3\n    w = np.random.uniform(1/dim,-1/dim, (dim,1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "alexandra.larsonneur@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    #dim=num_px*num_px*3\n    w = np.random.uniform(1/dim,-1/dim, (dim,1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 0.0,
        "update_time": "2023-10-03 14:57:14",
        "atype": "bkcode"
    },
    "alexis.akujuobi-asoluka@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.rand(dim, 1)    # random.rand to set random values\n    b = np.random.rand()                     # same\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "alexis.akujuobi-asoluka@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.rand(dim, 1)    # random.rand to set random values\n    b = np.random.rand()                     # same\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 0.0,
        "update_time": "2023-10-03 19:03:33",
        "atype": "bkcode"
    },
    "ali.m-sahi@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "ali.m-sahi@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 13:38:02"
    },
    "angel.jouen@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = 0 #np.random.uniform(dim,1)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "angel.jouen@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = 0 #np.random.uniform(dim,1)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:00:13"
    },
    "antoine.rochette@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "antoine.rochette@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-03 14:48:32",
        "atype": "bkcode"
    },
    "arij.salablab@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim,1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "arij.salablab@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim,1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 0.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 21:32:41"
    },
    "armand.loisil@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n   \n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "armand.loisil@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n   \n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 14:57:04"
    },
    "axel.streiff@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))    # ...\n    b = np.random.uniform(-1/dim,1/dim)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "axel.streiff@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))    # ...\n    b = np.random.uniform(-1/dim,1/dim)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 15:48:07"
    },
    "badis.perdrix@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform( -1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "badis.perdrix@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform( -1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-04 15:39:58",
        "atype": "bkcode"
    },
    "baptiste.rousselet@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, size=(dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)             # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "baptiste.rousselet@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, size=(dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)             # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "update_time": "2023-10-04 11:00:47",
        "atype": "bkcode"
    },
    "colin.duchanoy@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform((-1/dim),(1/dim),(dim, 1))\n    b = np.random.uniform((-1/dim),(1/dim))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "colin.duchanoy@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform((-1/dim),(1/dim),(dim, 1))\n    b = np.random.uniform((-1/dim),(1/dim))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 15:22:23"
    },
    "dorian.rondeau@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = num_px*num_px*3\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "dorian.rondeau@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = num_px*num_px*3\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 10:45:46"
    },
    "evan.garcia@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = np.random.uniform(-1/dim, 1/dim)                \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "note_src": "manual",
        "user": "evan.garcia@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = np.random.uniform(-1/dim, 1/dim)                \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "update_time": "2023-10-03 15:05:17",
        "atype": "bkcode"
    },
    "gaetan.chiesura@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim, (dim, 1))\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "gaetan.chiesura@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim,1/dim, (dim, 1))\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:09:37"
    },
    "geoffrey.vaillant@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0              \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "geoffrey.vaillant@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0              \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-04 13:26:22",
        "atype": "bkcode"
    },
    "john.doe@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim, 1))\n\n    b = np.random.uniform(-1/dim,1/dim)\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "john.doe@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim, 1))\n\n    b = np.random.uniform(-1/dim,1/dim)\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 0.0,
        "update_time": "2023-10-04 10:44:45",
        "atype": "bkcode"
    },
    "julian.lavarelo@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)    \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "julian.lavarelo@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)    \n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 10:46:34"
    },
    "lea.dupin@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1 / dim, 1 / dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = num_px * num_px * 3\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "lea.dupin@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1 / dim, 1 / dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = num_px * num_px * 3\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 10:44:03"
    },
    "luc.fourty@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                    # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "luc.fourty@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                    # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 13:40:30"
    },
    "luc.sauleau@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))   # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "luc.sauleau@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))   # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 15:02:08"
    },
    "mathieu.klingler@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)                    # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "mathieu.klingler@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim)                    # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 6.0,
        "atype": "bkcode",
        "update_time": "2023-10-03 15:23:20"
    },
    "matteo.crosnier-de-bellaistre@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim, 1))\n\n    b = np.random.uniform(-1/dim,1/dim)\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "matteo.crosnier-de-bellaistre@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.zeros((dim, 1))\n\n    b = np.random.uniform(-1/dim,1/dim)\n    w = np.random.uniform(-1/dim,1/dim,(dim, 1))\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 0.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 08:42:20"
    },
    "mikael.kealbert@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim,(1,1))[0][0]  \n    print(b) \n              # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "mikael.kealbert@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = np.random.uniform(-1/dim, 1/dim,(1,1))[0][0]  \n    print(b) \n              # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 00:30:07"
    },
    "nathan.heckmann@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = np.random.uniform(dim, 1)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "nathan.heckmann@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = np.random.uniform(dim, 1)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-04 14:58:37",
        "atype": "bkcode"
    },
    "nils.joanne@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))   # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "nils.joanne@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))   # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-03 14:48:04",
        "atype": "bkcode"
    },
    "riccardo.cecchetto@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "riccardo.cecchetto@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-03 14:48:01",
        "atype": "bkcode"
    },
    "romain.miaux@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "romain.miaux@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 16:05:25"
    },
    "solution": {
        "update_time": "2023-10-10 22:57:03",
        "visible": true,
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = np.random.uniform(-1/dim, 1/dim)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b:.2f}, w.shape = {w.shape}\")\n\n",
        "note_upd": "2023-10-11 08:21:20",
        "explanation": "",
        "evaluation": "def student_evaluation_function():\n    dim = 2\n    score = bulkhours.is_equal(data_test=student.initialize_weights_randomly(dim)[0], data_ref=teacher.initialize_weights_randomly(dim)[0], max_score=3.0, min_score=0)\n\n    score += bulkhours.is_equal(data_test=student.initialize_weights_randomly(dim)[1], data_ref=teacher.initialize_weights_randomly(dim)[1], max_score=3.0, min_score=0)\n\n\n    return score\n",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, 1/dim, (dim, 1))\n    b = np.random.uniform(-1/dim, 1/dim)\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b:.2f}, w.shape = {w.shape}\")\n\n",
        "user": "solution",
        "note": 6.0,
        "atype": "bkcode",
        "hint": ""
    },
    "sualp.komurcuoglu@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, +1/dim, (dim, 1))    # ...\n    b = np.random.random()                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "sualp.komurcuoglu@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform(-1/dim, +1/dim, (dim, 1))    # ...\n    b = np.random.random()                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 13:31:09"
    },
    "thibaud.bonnet@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    dim_inv = 1 / dim\n    w = np.random.uniform(-dim_inv, dim_inv, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "thibaud.bonnet@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    dim_inv = 1 / dim\n    w = np.random.uniform(-dim_inv, dim_inv, (dim, 1))    # ...\n    b = 0                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "update_time": "2023-10-03 14:50:22",
        "atype": "bkcode"
    },
    "wassil.amghar@ipsa.fr": {
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform( -1/dim, 1/dim, (dim, 1))\n    b = 0                     # ...\n\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note_upd": "2023-10-11 08:21:20",
        "user": "wassil.amghar@ipsa.fr",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    w = np.random.uniform( -1/dim, 1/dim, (dim, 1))\n    b = 0                     # ...\n\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = 2\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "note": 3.0,
        "atype": "bkcode",
        "update_time": "2023-10-04 15:39:46"
    },
    "yann-loic-atasse.atakoui@ipsa.fr": {
        "note_upd": "2023-10-11 08:21:20",
        "note": 3.0,
        "user": "yann-loic-atasse.atakoui@ipsa.fr ",
        "main_execution": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)4\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    #w = np.zeros((dim, 1))    # ...\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = np.random.uniform(dim, 1)                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = (num_px * num_px * 3)\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "answer": "def initialize_weights_randomly(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n\n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)4\n\n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n\n    # Set the random seed\n    np.random.seed(42)\n\n    ### START CODE HERE ###\n    # Set initial weights to random values\n    #w = np.zeros((dim, 1))    # ...\n    w = np.random.uniform(-1/dim, 1/dim, (dim,1))\n    b = np.random.uniform(dim, 1)                     # ...\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n\n    return w, b\n\ndim = (num_px * num_px * 3)\nw, b = initialize_weights_randomly(dim)\nprint (f\"w = {w}, b = {b} \")\n",
        "atype": "bkcode",
        "update_time": "2023-10-04 13:44:15"
    }
}